{
  "openapi": "3.0.3",
  "info": {
    "title": "IROH-INT Dashboard Web Service",
    "version": "1.0.107",
    "license": {
      "name": "All Rights Reserved",
      "url": "https://www.cisco.com"
    },
    "contact": {
      "name": "Cisco Security Business Group -- Advanced Threat",
      "email": "cisco-intel-api-support@cisco.com"
    },
    "description": "All Dashboard APIs"
  },
  "security": [
    {
      "iroh": []
    },
    {
      "AuthorizationHeader": []
    },
    {
      "oauth2": [
        "telemetry",
        "integration",
        "private-intel",
        "admin",
        "cognitive",
        "profile",
        "inspect",
        "asset",
        "event",
        "feedback",
        "sse",
        "registry",
        "users",
        "investigation",
        "invite",
        "casebook",
        "orbital",
        "enrich",
        "oauth",
        "vault",
        "response",
        "notification",
        "global-intel:read",
        "webhook",
        "ao"
      ]
    }
  ],
  "tags": [
    {
      "name": "AppLinks",
      "description": "IROH Dashboard AppLinks"
    },
    {
      "name": "Tiles",
      "description": "IROH Dashboard Tiles"
    },
    {
      "name": "Health",
      "description": "This set of routes allow to check the health of your integrations setup Verify if your modules are setup correctly and if your credentials are correct."
    },
    {
      "name": "Deliberate",
      "description": "This set of routes allow to quickly get answers from your integrations You might use them at the start of any investigation to quickly get answers from your modules if something is bad."
    },
    {
      "name": "Observe",
      "description": "This set of routes allow to get in depth investigation data about a threat You might use them at the start of any investigation to get the full picture and get to know if something has been seen in your environment."
    },
    {
      "name": "Query",
      "description": "This set of routes allow to query for records related to observable events.Results are returned in OCSF format."
    },
    {
      "name": "Refer",
      "description": "This set of routes allow to get relevant Reference links and quickly pivot pursuing your investigation on a specific product interface. "
    },
    {
      "name": "Response",
      "description": "IROH Response"
    },
    {
      "name": "Private Intel",
      "description": "Access private-intel"
    }
  ],
  "paths": {
    "/iroh/iroh-dashboard/app-links": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "AppLinks"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `integration/app-link:read`\n\n",
        "parameters": [
          {
            "in": "query",
            "name": "module-type-filter",
            "description": "default behavior is 'require-instance'",
            "required": false,
            "type": "string",
            "enum": [
              "require-instance",
              "all"
            ]
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedAppLinks"
            },
            "description": ""
          }
        },
        "summary": "List all `AppLink`s"
      }
    },
    "/iroh/iroh-dashboard/app-links/{module-instance-id}": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "AppLinks"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `integration/app-link:read`\n\n",
        "parameters": [
          {
            "in": "path",
            "name": "module-instance-id",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedAppLink"
            },
            "description": ""
          }
        },
        "summary": "Get an `AppLink`"
      }
    },
    "/iroh/iroh-dashboard/tiles": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Tiles"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `integration/tile:read`\n\n",
        "parameters": [
          {
            "in": "query",
            "name": "xdr",
            "description": "XDR Platform",
            "required": false,
            "type": "string",
            "enum": [
              "1",
              "0"
            ],
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedTiles"
            },
            "description": ""
          }
        },
        "summary": "List all `Tile`s"
      }
    },
    "/iroh/iroh-dashboard/tiles/{module-instance-id}": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Tiles"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `integration/tile:read`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedTiles"
            },
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "module-instance-id",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "xdr",
            "description": "XDR Platform",
            "required": false,
            "type": "string",
            "enum": [
              "1",
              "0"
            ],
            "allowEmptyValue": true
          }
        ],
        "summary": "List `Tile`s for a Module Instance Id"
      }
    },
    "/iroh/iroh-dashboard/tiles/{module-instance-id}/{tile-id}": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Tiles"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `integration/tile:read`\n\n",
        "parameters": [
          {
            "in": "path",
            "name": "module-instance-id",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tile-id",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "xdr",
            "description": "XDR Platform",
            "required": false,
            "type": "string",
            "enum": [
              "1",
              "0"
            ],
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedTile"
            },
            "description": ""
          }
        },
        "summary": "Get a `Tile`"
      }
    },
    "/iroh/iroh-dashboard/tiles/{module-instance-id}/{tile-id}/data": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Tiles"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `integration/tile:read`\n\n",
        "parameters": [
          {
            "in": "path",
            "name": "module-instance-id",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tile-id",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "period",
            "description": "Select the Data Period",
            "required": false,
            "type": "string",
            "enum": [
              "last_7_days",
              "last_24_hours",
              "last_hour",
              "last_30_days",
              "last_90_days",
              "last_60_days"
            ],
            "allowEmptyValue": true
          },
          {
            "in": "query",
            "name": "groups",
            "description": "Specify the Requested Groups",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "allowEmptyValue": true
          },
          {
            "in": "query",
            "name": "xdr",
            "description": "XDR Platform",
            "required": false,
            "type": "string",
            "enum": [
              "1",
              "0"
            ],
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedTileData"
            },
            "description": ""
          }
        },
        "summary": "Get Data for a `Tile`, includes caching headers"
      }
    },
    "/iroh/iroh-dashboard/tiles/{module-instance-id}/{tile-id}/data/groups": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Tiles"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `integration/tile:read`\n\n",
        "parameters": [
          {
            "in": "path",
            "name": "module-instance-id",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tile-id",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int64",
            "allowEmptyValue": true
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int64",
            "allowEmptyValue": true
          },
          {
            "in": "query",
            "name": "search",
            "description": "",
            "required": false,
            "type": "string",
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedTileGroups"
            },
            "description": ""
          }
        },
        "summary": "Get Data for a Tile, includes caching headers"
      }
    },
    "/iroh/iroh-enrich/health": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Health"
        ],
        "summary": "Health check all the modules",
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `integration/health:read`\n\nRun a health check for all your configured modules",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedHealth"
            },
            "description": "A list of Health Status for each module"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-401"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-500"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          }
        }
      }
    },
    "/iroh/iroh-enrich/health/{module_instance_id}": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Health"
        ],
        "summary": "Health check one module",
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `integration/health:read`\n\nRun a health check for a specific module",
        "parameters": [
          {
            "in": "path",
            "name": "module_instance_id",
            "description": "A `ModuleInstance` ID",
            "required": true,
            "example": "0407c063-cd4f-4f3a-a808-bf2ef8dc800f",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedSingleHealth"
            },
            "description": "A list of Health Status for each module"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-401"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-500"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          }
        }
      }
    },
    "/iroh/iroh-enrich/deliberate/observables": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Deliberate"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `enrich/observables/deliberate:read`\n\nThis route queries all enabled modules supporting the enrichment protocol with the supplied `Observables` in order to quickly get fast `Verdicts` from all your integrations.",
        "parameters": [
          {
            "in": "query",
            "name": "mids",
            "description": "Use this parameter to query only some Modules passing their Ids",
            "required": false,
            "example": [
              "a78f09b4-16fa-4617-8bbf-f6044284ec0f",
              "36716d80-2bd7-47fc-a179-cde2a0a8c5fe"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "flags",
            "description": "Use this parameter to use Modules which ModuleType flag matches with items provided as an argument.",
            "required": false,
            "example": [
              "cisco",
              "threat-intel"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "product_categories",
            "description": "Use this parameter to use Modules which ModuleType product_category matches with items provided as an argument.",
            "required": false,
            "example": [
              "cloud-firewall",
              "itsm"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "Observables",
            "description": "An Observable list",
            "required": true,
            "schema": {
              "description": "An Observable list",
              "example": [
                {
                  "type": "domain",
                  "value": "ilo.brenz.pl"
                },
                {
                  "type": "email",
                  "value": "no-reply@internetbadguys.com"
                },
                {
                  "type": "sha256",
                  "value": "8fda14f91e27afec5c1b1f71d708775c9b6e2af31e8331bbf26751bc0583dc7e"
                }
              ],
              "type": "array",
              "items": {
                "$ref": "#/definitions/Observable"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeliberateEnvelopedObserveBundle"
            },
            "description": "A `Bundle` including `Verdict` documents only"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-401"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-500"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          }
        },
        "summary": "Get Observable verdicts"
      }
    },
    "/iroh/iroh-enrich/observe/observables": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Observe"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `enrich/observables/observe:read`\n\nThis route queries all enabled modules supporting the enrichment protocol with the supplied `Observables` in order to get any related `Threat Context`",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ObserveEnvelopedObserveBundle"
            },
            "description": "A `Bundle` including Any CTIM Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-401"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-500"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "mids",
            "description": "Use this parameter to query only some Modules passing their Ids",
            "required": false,
            "example": [
              "a78f09b4-16fa-4617-8bbf-f6044284ec0f",
              "36716d80-2bd7-47fc-a179-cde2a0a8c5fe"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "flags",
            "description": "Use this parameter to use Modules which ModuleType flag matches with items provided as an argument.",
            "required": false,
            "example": [
              "cisco",
              "threat-intel"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "product_categories",
            "description": "Use this parameter to use Modules which ModuleType product_category matches with items provided as an argument.",
            "required": false,
            "example": [
              "cloud-firewall",
              "itsm"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "Observables",
            "description": "An Observable list",
            "required": true,
            "schema": {
              "description": "An Observable list",
              "example": [
                {
                  "type": "domain",
                  "value": "ilo.brenz.pl"
                },
                {
                  "type": "email",
                  "value": "no-reply@internetbadguys.com"
                },
                {
                  "type": "sha256",
                  "value": "8fda14f91e27afec5c1b1f71d708775c9b6e2af31e8331bbf26751bc0583dc7e"
                }
              ],
              "type": "array",
              "items": {
                "$ref": "#/definitions/Observable"
              }
            }
          }
        ],
        "summary": "Enrich Observables"
      }
    },
    "/iroh/iroh-enrich/observe/targets": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Observe"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `enrich/targets/observe:read`\n\nThis route queries all enabled modules supporting the enrichment protocol with the supplied `Observables` in order to get any related `Threat Context`",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ObserveEnvelopedObserveBundle"
            },
            "description": "A `Bundle` including Any CTIM Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-401"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-500"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "mids",
            "description": "Use this parameter to query only some Modules passing their Ids",
            "required": false,
            "example": [
              "a78f09b4-16fa-4617-8bbf-f6044284ec0f",
              "36716d80-2bd7-47fc-a179-cde2a0a8c5fe"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "ObserveTargetsBody",
            "description": "A list of Observables and an Optional Time Window",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObserveTargetsBody"
            }
          }
        ],
        "summary": "Enrich Targets"
      }
    },
    "/iroh/iroh-enrich/query/ocsf-sync": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Query"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `enrich/query-ocsf:read`\n\nThis route queries all enabled modules supporting the query-ocsf protocol with the supplied query in order to retrieve related event data from all your integrations.",
        "parameters": [
          {
            "in": "query",
            "name": "mids",
            "description": "Use this parameter to query only some Modules passing their Ids",
            "required": false,
            "example": [
              "a78f09b4-16fa-4617-8bbf-f6044284ec0f",
              "36716d80-2bd7-47fc-a179-cde2a0a8c5fe"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "flags",
            "description": "Use this parameter to use Modules which ModuleType flag matches with items provided as an argument.",
            "required": false,
            "example": [
              "cisco",
              "threat-intel"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "product_categories",
            "description": "Use this parameter to use Modules which ModuleType product_category matches with items provided as an argument.",
            "required": false,
            "example": [
              "cloud-firewall",
              "itsm"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "OCSFQuery",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OCSFQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedQueryOCSFBundle"
            },
            "description": "A `Bundle` including event data in OSCF format"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-401"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-500"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          }
        },
        "summary": "Get OCSF event data"
      }
    },
    "/iroh/iroh-enrich/query/ocsf": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Query"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `enrich/query-ocsf:read`\n\nThis route enqueues a query for all enabled modules supporting the query-ocsf protocol with the supplied query in order to retrieve related event data from all your integrations. Results are written to an external file store",
        "parameters": [
          {
            "in": "query",
            "name": "mids",
            "description": "Use this parameter to query only some Modules passing their Ids",
            "required": false,
            "example": [
              "a78f09b4-16fa-4617-8bbf-f6044284ec0f",
              "36716d80-2bd7-47fc-a179-cde2a0a8c5fe"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "flags",
            "description": "Use this parameter to use Modules which ModuleType flag matches with items provided as an argument.",
            "required": false,
            "example": [
              "cisco",
              "threat-intel"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "product_categories",
            "description": "Use this parameter to use Modules which ModuleType product_category matches with items provided as an argument.",
            "required": false,
            "example": [
              "cloud-firewall",
              "itsm"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "OCSFQuery",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OCSFQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Response272933"
            },
            "description": "Request identifier and details for the query request"
          }
        },
        "summary": "Retrieve OCSF event data asynchronously"
      }
    },
    "/iroh/iroh-enrich/refer/observables": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Refer"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `enrich/observables/refer:read`\n\nGet observable references",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedRefs"
            },
            "description": "A List of References"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-401"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-500"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "Observables",
            "description": "An Observable list",
            "required": true,
            "schema": {
              "description": "An Observable list",
              "example": [
                {
                  "type": "domain",
                  "value": "ilo.brenz.pl"
                },
                {
                  "type": "email",
                  "value": "no-reply@internetbadguys.com"
                },
                {
                  "type": "sha256",
                  "value": "8fda14f91e27afec5c1b1f71d708775c9b6e2af31e8331bbf26751bc0583dc7e"
                }
              ],
              "type": "array",
              "items": {
                "$ref": "#/definitions/Observable"
              }
            }
          }
        ]
      }
    },
    "/iroh/iroh-enrich/reputation/observable": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Reputation"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `enrich/observables/reputation:read`\n\nThis route queries intel modules with supplied `Observable` in order to calculate its `Reputation`",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedReputation"
            },
            "description": "Reputation verdict calculated for given observable"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-401"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/NormalizedError-500"
            },
            "description": "A `NormalizedError` including a `trace_id`"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "description": "The type of observable.",
            "required": true,
            "example": "ip",
            "type": "string",
            "enum": [
              "file_path",
              "mac_address",
              "trend_micro_id",
              "cybereason_id",
              "process_args",
              "s1_agent_id",
              "device",
              "hostname",
              "certificate_common_name",
              "serial_number",
              "meraki_network_id",
              "url",
              "certificate_serial",
              "meraki_org_id",
              "cisco_cm_id",
              "registry_key",
              "process_path",
              "darktrace_id",
              "process_username",
              "cortex_agent_id",
              "orbital_node_id",
              "process_uid",
              "ngfw_name",
              "user",
              "certificate_issuer",
              "ipv6",
              "email",
              "cisco_uc_id",
              "cvm_id",
              "sha256",
              "crowdstrike_id",
              "google_cloud_id",
              "acudid",
              "sha1",
              "registry_name",
              "md5",
              "service_now_id",
              "ip",
              "domain",
              "email_subject",
              "imei",
              "ngfw_id",
              "amp_computer_guid",
              "ms_machine_id",
              "secure_access_id",
              "mutex",
              "processor_id",
              "swc_device_id",
              "registry_path",
              "odns_identity",
              "odns_identity_label",
              "cisco_mid",
              "process_name",
              "pki_serial",
              "meraki_node_sn",
              "email_messageid",
              "imsi",
              "user_agent",
              "process_hash",
              "file_name"
            ]
          },
          {
            "in": "query",
            "name": "value",
            "description": "The value of the observable.",
            "required": true,
            "example": "1.2.3.4",
            "type": "string"
          },
          {
            "in": "query",
            "name": "mids",
            "description": "Use this parameter to query only some Modules passing their Ids",
            "required": false,
            "example": [
              "a78f09b4-16fa-4617-8bbf-f6044284ec0f",
              "36716d80-2bd7-47fc-a179-cde2a0a8c5fe"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "summary": "Enrich Observable Reputation"
      }
    },
    "/iroh/iroh-response/respond/observables": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Response"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `response/observables:read`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedActions"
            },
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "Observable",
            "description": "A simple, atomic value which has a consistent identity, and is stable enough to be attributed an intent or nature.  This is the classic 'indicator' which might appear in a data feed of bad IPs, or bad Domains.  These do not exist as objects within the CTIA storage model, so you never create an observable.",
            "required": true,
            "schema": {
              "description": "a list of observables",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Observable"
              }
            }
          },
          {
            "in": "query",
            "name": "params",
            "description": "",
            "required": false,
            "type": "string",
            "allowEmptyValue": true
          }
        ],
        "summary": "List available actions for an observable"
      }
    },
    "/iroh/iroh-response/respond/sighting": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Response"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `response/sighting:read`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedActions"
            },
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "Sighting",
            "description": "A Sighting",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sighting"
            }
          },
          {
            "in": "query",
            "name": "params",
            "description": "",
            "required": false,
            "type": "string",
            "allowEmptyValue": true
          }
        ],
        "summary": "List available actions for a sighting"
      }
    },
    "/iroh/iroh-response/respond/trigger/{module-instance-id}/{action-id}": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Response"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `response/trigger:write`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EnvelopedActionResult"
            },
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "module-instance-id",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "action-id",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "observable_type",
            "description": "Observable type names",
            "required": false,
            "example": "acudid",
            "type": "string",
            "enum": [
              "file_path",
              "mac_address",
              "trend_micro_id",
              "cybereason_id",
              "process_args",
              "s1_agent_id",
              "device",
              "hostname",
              "certificate_common_name",
              "serial_number",
              "meraki_network_id",
              "url",
              "certificate_serial",
              "meraki_org_id",
              "cisco_cm_id",
              "registry_key",
              "process_path",
              "darktrace_id",
              "process_username",
              "cortex_agent_id",
              "orbital_node_id",
              "process_uid",
              "ngfw_name",
              "user",
              "certificate_issuer",
              "ipv6",
              "email",
              "cisco_uc_id",
              "cvm_id",
              "sha256",
              "crowdstrike_id",
              "google_cloud_id",
              "acudid",
              "sha1",
              "registry_name",
              "md5",
              "service_now_id",
              "ip",
              "domain",
              "email_subject",
              "imei",
              "ngfw_id",
              "amp_computer_guid",
              "ms_machine_id",
              "secure_access_id",
              "mutex",
              "processor_id",
              "swc_device_id",
              "registry_path",
              "odns_identity",
              "odns_identity_label",
              "cisco_mid",
              "process_name",
              "pki_serial",
              "meraki_node_sn",
              "email_messageid",
              "imsi",
              "user_agent",
              "process_hash",
              "file_name"
            ]
          },
          {
            "in": "query",
            "name": "observable_value",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "summary": "Trigger an Action"
      }
    },
    "/iroh/private-intel/incident/search": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "summary": "Search incidents in Private Intel. Incidents enriched with `:enrichment_status` when available.",
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IncidentSearchResults"
              }
            },
            "description": ""
          }
        },
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `private-intel/incident:read`\n\n",
        "parameters": [
          {
            "in": "query",
            "name": "sort_order",
            "description": "Sort direction. Known values: asc, desc",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "categories",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "intended_effect",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tlp",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "status",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "promotion_method",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort_by",
            "description": "Sort results on a field. See /ctia/incident/search Swagger on private intel for all supported values. Known values: id, schema_version, revision, timestamp, language, tlp, source, source_uri, title, title, source, source_uri, confidence, status, incident_time.opened, incident_time.discovered, incident_time.reported, incident_time.remediated, incident_time.closed, incident_time.rejected, discovery_method, intended_effect, assignees, promotion_method",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "high_impact",
            "description": "",
            "required": false,
            "type": "string",
            "enum": [
              "false",
              "true"
            ]
          },
          {
            "in": "query",
            "name": "fields",
            "description": "A list of fields. Known fields: id, schema_version, revision, timestamp, language, tlp, source, source_uri, title, title, source, source_uri, confidence, status, incident_time.opened, incident_time.discovered, incident_time.reported, incident_time.remediated, incident_time.closed, incident_time.rejected, discovery_method, intended_effect, assignees, promotion_method",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "search_after",
            "description": "Pagination stateless cursor",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "language",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "assignees",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Pagination Limit",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination Offset",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "confidence",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "discovery_method",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "source",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "revision",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "to",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ]
      }
    },
    "/iroh/private-intel/incident/{incident-id}/tactic/{mitre-id}": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "summary": "Get MITRE tactic related to incident.",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TacticView"
            },
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "incident-id",
            "description": "The identifier of the incident to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mitre-id",
            "description": "The identifier of the MITRE attack pattern to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `global-intel:read,private-intel/incident:read`\n\n"
      }
    },
    "/iroh/private-intel/incident/{incident-id}/tactics": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "summary": "Get all MITRE tactics related to incident.",
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TacticView"
              }
            },
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "incident-id",
            "description": "The identifier of the incident to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `global-intel:read,private-intel/incident:read`\n\n"
      }
    },
    "/iroh/private-intel/incident/{incident-id}": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "summary": "Get incident in Private Intel. Enriched with `:enrichment_status` when available.",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/IncidentWithEnrichmentStatus"
            },
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "incident-id",
            "description": "The identifier of the incident to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fields",
            "description": "A list of fields. Known fields: id, schema_version, revision, timestamp, language, tlp, source, source_uri, title, title, source, source_uri, confidence, status, incident_time.opened, incident_time.discovered, incident_time.reported, incident_time.remediated, incident_time.closed, incident_time.rejected, discovery_method, intended_effect, assignees, promotion_method",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `private-intel/incident:read`\n\n"
      },
      "patch": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "summary": "Patch an incident in Private Intel",
        "parameters": [
          {
            "in": "body",
            "name": "PatchIncident",
            "description": "For submitting a new Incident.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchIncident"
            }
          },
          {
            "in": "query",
            "name": "wait_for",
            "description": "wait for updated entity to be available for search",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "incident-id",
            "description": "The identifier of the incident to patch.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Incident"
            },
            "description": ""
          }
        },
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `private-intel/incident`\n\n"
      }
    },
    "/iroh/private-intel/incident/{incident-id}/status": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "summary": "Post an incident status to Private Intel",
        "parameters": [
          {
            "in": "body",
            "name": "IncidentStatusUpdate",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncidentStatusUpdate"
            }
          },
          {
            "in": "query",
            "name": "wait_for",
            "description": "wait for updated entity to be available for search",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "incident-id",
            "description": "The identifier of the incident to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Incident"
            },
            "description": ""
          }
        },
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `private-intel/incident:write`\n\n"
      }
    },
    "/iroh/private-intel/incident": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "summary": "Post an incident to Private Intel",
        "parameters": [
          {
            "in": "body",
            "name": "NewIncident",
            "description": "For submitting a new Incident.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewIncident"
            }
          },
          {
            "in": "query",
            "name": "wait_for",
            "description": "wait for updated entity to be available for search",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/Incident"
            },
            "description": ""
          }
        },
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `private-intel/incident:write`\n\n"
      }
    },
    "/iroh/private-intel/incident-summary/search": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "summary": "Search incident summaries in Private Intel for related entity data",
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IncidentSummarySearchResults"
              }
            },
            "description": ""
          }
        },
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `private-intel/incident:read`\n\n",
        "parameters": [
          {
            "in": "query",
            "name": "sort_order",
            "description": "Sort direction. Known values: asc, desc",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "categories",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "intended_effect",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tlp",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "status",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "promotion_method",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort_by",
            "description": "Sort results on a field. See /ctia/incident/search Swagger on private intel for all supported values. Known values: id, schema_version, revision, timestamp, language, tlp, source, source_uri, title, title, source, source_uri, confidence, status, incident_time.opened, incident_time.discovered, incident_time.reported, incident_time.remediated, incident_time.closed, incident_time.rejected, discovery_method, intended_effect, assignees, promotion_method",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "high_impact",
            "description": "",
            "required": false,
            "type": "string",
            "enum": [
              "false",
              "true"
            ]
          },
          {
            "in": "query",
            "name": "fields",
            "description": "A list of fields. Known fields: id, schema_version, revision, timestamp, language, tlp, source, source_uri, title, title, source, source_uri, confidence, status, incident_time.opened, incident_time.discovered, incident_time.reported, incident_time.remediated, incident_time.closed, incident_time.rejected, discovery_method, intended_effect, assignees, promotion_method, context.assets, context.asset-mappings, context.asset-properties, context.incidents, context.indicators, context.malwares, context.sightings",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "search_after",
            "description": "Pagination stateless cursor",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "language",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "assignees",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Pagination Limit",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination Offset",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "confidence",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "discovery_method",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "source",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "revision",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "to",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ]
      }
    },
    "/iroh/private-intel/note": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "summary": "Post a Note to Private Intel",
        "parameters": [
          {
            "in": "body",
            "name": "NewNote",
            "description": "Schema for submitting Notes",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewNote"
            }
          },
          {
            "in": "query",
            "name": "wait_for",
            "description": "wait for updated entity to be available for search",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "description": ""
          }
        },
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `private-intel/note:write`\n\n"
      }
    },
    "/iroh/private-intel/bundle/import": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `private-intel:write`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/BundleImportResult"
            },
            "description": ""
          }
        },
        "summary": "POST many new entities using a single HTTP call",
        "parameters": [
          {
            "in": "body",
            "name": "BundleImportBundle",
            "description": "a Bundle to import",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BundleImportBundle"
            }
          },
          {
            "in": "query",
            "name": "external-key-prefixes",
            "description": "Comma separated list of external key prefixes",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/iroh/private-intel/bulk": {
      "delete": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `private-intel:write`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/BulkDeleteResult"
            },
            "description": ""
          }
        },
        "summary": "DELETE many entities at once",
        "parameters": [
          {
            "in": "query",
            "name": "wait_for",
            "description": "wait for created entities to be available for search",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "BulkRefs",
            "description": "a new Bulk Delete object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkRefs"
            }
          }
        ]
      }
    },
    "/iroh/private-intel/mitre/tactic/search": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `global-intel:read,private-intel:read`\n\n",
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TacticView"
              }
            },
            "description": ""
          }
        },
        "summary": "Return requested tactics with all techniques",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "Mitre Tactic ids to search",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ]
      }
    },
    "/iroh/private-intel/mitre/tactic/{mitre-id}": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `global-intel:read,private-intel:read`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TacticView"
            },
            "description": ""
          }
        },
        "summary": "Return requested tactic with all techniques",
        "parameters": [
          {
            "in": "path",
            "name": "mitre-id",
            "description": "The identifier of the MITRE attack pattern to retrieve.",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/iroh/private-intel/mitre/technique/incidents": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `private-intel:read`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TotalIncidentsPerTechnique"
            },
            "description": ""
          }
        },
        "summary": "Retrieve the total number of incidents per technique.",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "to",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ]
      }
    },
    "/iroh/private-intel/mitre/coverage-matrix": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `global-intel:read,private-intel:read`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MitreCoverage"
            },
            "description": ""
          }
        },
        "summary": "Return the Mitre coverage matrix, products metadata and any errors. Elements are optional, as are some fields.",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "to",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "includes",
            "description": "",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "products",
                "adversaries",
                "matrix"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "incidents?",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "descriptions?",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ]
      }
    },
    "/iroh/private-intel/mitre/coverage-matrix/tactic/{tactic-id}": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `global-intel:read,private-intel:read`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TacticCoverage",
              "x-nullable": true
            },
            "description": ""
          }
        },
        "summary": "Return the necessary data to populate a tactic drawer.",
        "parameters": [
          {
            "in": "path",
            "name": "tactic-id",
            "description": "The identifier of the MITRE tactic to retrieve.",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/iroh/private-intel/mitre/coverage-matrix/technique/{technique-id}": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `global-intel:read,private-intel:read`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TechniqueCoverage",
              "x-nullable": true
            },
            "description": ""
          }
        },
        "summary": "Return the necessary data to populate a technique drawer.",
        "parameters": [
          {
            "in": "path",
            "name": "technique-id",
            "description": "The identifier of the MITRE technique or sub-technique to retrieve.",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/iroh/private-intel/mitre/coverage-matrix/adversary/{adversary-id}": {
      "get": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `global-intel:read,private-intel:read`\n\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Adversary",
              "x-nullable": true
            },
            "description": ""
          }
        },
        "summary": "Return the necessary data to populate an adversary drawer.",
        "parameters": [
          {
            "in": "path",
            "name": "adversary-id",
            "description": "The identifier of the MITRE adversary to retrieve.",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/iroh/private-intel/mitre/coverage-matrix/configuration/{module-instance-id}": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "description": "- For Secure Endpoint modules:\n\n  - get engines for this tenant: use empty `ConfigurationInsightsParams`.\n  - get a specific engine coverage: use `{\"coverage\": {\"engine-id\": <engine-guid>}}` as `ConfigurationInsightsParams`\n  - get the policies of <engine-guid> for mode <mode-id>: use `{\"policies\": {\"engine-id\": <engine-guid>, \"mode\": <mode-id>}}` as `ConfigurationInsightsParams`\n\n  Each response provides the `configuration_insights_params` to be used for next calls.\n\n- For other types of modules:\n  Not yet implemented.\n",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MitreConfigurationInsights",
              "x-nullable": true
            },
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "ConfigurationInsightsParams",
            "description": "",
            "required": true,
            "schema": {
              "x-oneOf": [
                {
                  "$ref": "#/definitions/ConfigurationInsightsParams"
                },
                {
                  "$ref": "#/definitions/ConfigurationInsightsParams"
                },
                {
                  "$ref": "#/definitions/ConfigurationInsightsParams"
                }
              ]
            }
          },
          {
            "in": "path",
            "name": "module-instance-id",
            "description": "The instance id of the module for which the configuration is requested.",
            "required": true,
            "type": "string"
          }
        ],
        "summary": "Get insights on how a product configuration impacts the coverage of techniques."
      }
    },
    "/iroh/private-intel/mitre/coverage-matrix/adversaries-for-techniques": {
      "post": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "description": "[required scopes](/iroh/doc/iroh-auth/#scopes): `global-intel:read,private-intel:read`\n\n",
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ComparedAdversary"
              }
            },
            "description": ""
          }
        },
        "summary": "Return a list of adversaries which set of techniques is closest to submitted techniques.",
        "parameters": [
          {
            "in": "body",
            "name": "CompareAdversariesParams",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompareAdversariesParams"
            }
          }
        ]
      }
    },
    "/iroh/private-intel/asset/external_id/{asset-external-id}/update-properties": {
      "patch": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "summary": "Update an asset's properties by its external id, and then asynchronously rescore provided incidents.",
        "parameters": [
          {
            "in": "path",
            "name": "asset-external-id",
            "description": "The external identifier of the asset whose properties will be updated.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "UpdateAssetPropertiesBody",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssetPropertiesBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "description": "This route should be called to update the cisco:ctr:assetValue or cisco:ctr:labels property of an asset.\n\nFor example, given an asset with external id transient:MY-DI-ASSET which is related to incidents:\n  [ \"https://private.intel.int.iroh.site/ctia/incident-11111\", \"https://private.intel.int.iroh.site/ctia/incident-22222\", \"https://private.intel.int.iroh.site/ctia/incident-33333\" ]\nthis request updates the asset's cisco:ctr:assetValue to 7 and cisco:ctr:labels to [\"label1\",\"label2\"], then schedules rescoring for the provided incidents.\n\nPATCH https://visibility.int.iroh.site/iroh/private-intel/asset/external_id/transient%3AMY-DI-ASSET/update-properties\nBody:\n{\n  \"rescore_incident_ids\" : [ \"https://private.intel.int.iroh.site/ctia/incident-11111\", \"https://private.intel.int.iroh.site/ctia/incident-22222\", \"https://private.intel.int.iroh.site/ctia/incident-33333\" ],\n  \"updated_properties\" : {\n    \"cisco:ctr:assetValue\" : 7,\n    \"cisco:ctr:labels\" : [ \"label1\", \"label2\" ]\n  }\n}\n\nUp to 1000 incidents may be provided per request."
      }
    },
    "/iroh/private-intel/bulk/update-asset-properties": {
      "patch": {
        "x-no-doc": false,
        "tags": [
          "Private Intel"
        ],
        "summary": "For each asset, update its asset properties by its external id, and then asynchronously rescore provided incidents.",
        "parameters": [
          {
            "in": "body",
            "name": "BulkUpdateAssetPropertiesBody",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkUpdateAssetPropertiesBody"
              }
            }
          }
        ],
        "description": "This route should be called to update the cisco:ctr:assetValue or cisco:ctr:labels property of many assets.\n\nFor example, given an asset with external id transient:MY-DI-ASSET which is related to incidents:\n  [ \"https://private.intel.int.iroh.site/ctia/incident-11111\", \"https://private.intel.int.iroh.site/ctia/incident-22222\", \"https://private.intel.int.iroh.site/ctia/incident-33333\" ]\nthis request updates the asset's cisco:ctr:assetValue to 7 and cisco:ctr:labels to [\"label1\",\"label2\"], then schedules rescoring for the provided incidents.\n\nPATCH https://visibility.int.iroh.site/iroh/private-intel/bulk/update-asset-properties\nBody:\n[ {\n  \"asset_external_id\" : \"transient:MY-DI-ASSET\",\n  \"rescore_incident_ids\" : [ \"https://private.intel.int.iroh.site/ctia/incident-11111\", \"https://private.intel.int.iroh.site/ctia/incident-22222\", \"https://private.intel.int.iroh.site/ctia/incident-33333\" ],\n  \"updated_properties\" : {\n    \"cisco:ctr:assetValue\" : 7,\n    \"cisco:ctr:labels\" : [ \"label1\", \"label2\" ]\n  }\n} ]\n\nUp to 100 assets and 1000 incidents may be provided per request, but no more than 1000 incidents for any one asset.",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    }
  }
}