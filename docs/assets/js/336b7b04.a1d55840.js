"use strict";(self.webpackChunkintegration_development_docs=self.webpackChunkintegration_development_docs||[]).push([[166],{447:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"relay-module/investigate/referral","title":"Referral Development","description":"Referrals in Cisco XDR is an option to link (pivot) out to your product for an observable.","source":"@site/mdx-docs/relay-module/investigate/02-referral.mdx","sourceDirName":"relay-module/investigate","slug":"/relay-module/investigate/referral","permalink":"/xdr-integration-development-docs/docs/relay-module/investigate/referral","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Deliberation Development","permalink":"/xdr-integration-development-docs/docs/relay-module/investigate/deliberation"},"next":{"title":"Sightings Development","permalink":"/xdr-integration-development-docs/docs/relay-module/investigate/sightings"}}');var s=t(4848),a=t(8453);const o={sidebar_position:2},l="Referral Development",i={},u=[{value:"Referrals for URLHaus",id:"referrals-for-urlhaus",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"referral-development",children:"Referral Development"})}),"\n",(0,s.jsx)(n.p,{children:"Referrals in Cisco XDR is an option to link (pivot) out to your product for an observable."}),"\n",(0,s.jsxs)(n.p,{children:["Similar to the ",(0,s.jsx)(n.em,{children:"deliberate"})," endpoint, we will receive an array of observables with a type and a value."]}),"\n",(0,s.jsx)(n.p,{children:"We will respond only to the values that we are able to provide a link for. In the case of URLHaus, we would only respond to URL types. When it comes to Wazuh, we can respond with hashes, URLs, emails and many others."}),"\n",(0,s.jsx)(n.h2,{id:"referrals-for-urlhaus",children:"Referrals for URLHaus"}),"\n",(0,s.jsx)(n.p,{children:"To continue building on the verdicts being provided by URLHaus, we will add a referral option that we will be replace with Wazuh later."}),"\n",(0,s.jsxs)(n.p,{children:["We just need to change our For Loop logic to make the refer work. Copy the urlLoop function and paste it. Rename it ",(0,s.jsx)(n.em,{children:"urlLoopRefer"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Then we need to change the data that is returned and what values we pull from the URLHaus response."}),"\n",(0,s.jsx)(n.p,{children:"The highlighted lines below are what are different now:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// highlight-next-line\nconst urlLoopRefer = async (observableArray) => {\n  // highlight-next-line\n  let returnData = [];\n  for (const observable of observableArray) {\n    if (observable.type === 'url') {\n      console.log(`Processing URL: ${observable.value}`);\n      const urlState = await getUrlState(observable.value);\n      const url_status = await urlState.query_status;\n      if (url_status === 'no_results') {\n        console.log(`No results for ${observable.value}`);\n      }\n      if (url_status === 'ok') {\n        // highlight-start\n        await returnData.push({\n          id: `ref-urlhaus-search-url-${observable.value}`,\n          title: 'Search for this URL',\n          description: 'Lookup this URL on URLHaus',\n          url: urlState.urlhaus_reference,\n        });\n        // highlight-end\n        console.log(returnData);\n      }\n    }\n  }\n\n  return returnData;\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the above code, we can see that we now push an object with these field ",(0,s.jsx)(n.code,{children:"id, title, description, url"})]}),"\n",(0,s.jsx)(n.p,{children:"These are all the required fields needed to make refer work."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"id"})," field needs to be a unique id. In this guide we have called it what tool is being used and then add the observable value to it. That should be unique enough for most needs."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"title"})," field is used for what the link will say in Cisco XDR."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"description"})," field is the text used in the popup when hovering over the link."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"url"})," is a customer URL used to link back to your product. You can see we pull our the urlhaus_reference field here. This is a link to the URLHaus page for the malicious url provided."]}),"\n",(0,s.jsxs)(n.p,{children:["Now we need to add the refer endpoint to the ",(0,s.jsx)(n.em,{children:"module.exports"})," section."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"app.post('/refer/observables', async (req, res) => {\n  const observables = req.body;\n  const returnData = await urlLoopRefer(observables);\n  res.send({ data: returnData });\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"The entire file should look like the below:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="deliberateRoute.js"',children:"const axios = require('axios');\nconst timeFunctions = require('../../utils/time.js');\n\nconst getUrlState = async (url) => {\n  const params = new URLSearchParams();\n  params.append('url', url);\n  const response = await axios.post(\n    'https://urlhaus-api.abuse.ch/v1/url/',\n    params\n  );\n  return response.data;\n};\n\nconst urlLoop = async (observableArray) => {\n  let returnData = { verdicts: { count: 0, docs: [] } };\n  for (const observable of observableArray) {\n    if (observable.type === 'url') {\n      console.log(`Processing URL: ${observable.value}`);\n      const urlState = await getUrlState(observable.value);\n      const url_status = await urlState.query_status;\n      if (url_status === 'no_results') {\n        console.log(`No results for ${observable.value}`);\n      }\n      if (url_status === 'ok') {\n        returnData['verdicts']['count'] += 1;\n        await returnData['verdicts']['docs'].push({\n          type: 'verdict',\n          disposition: 2,\n          observable: {\n            value: observable.value,\n            type: 'url',\n          },\n          disposition_name: 'Malicious',\n          valid_time: {\n            start_time: new Date(timeFunctions.getNow() * 1000).toISOString(),\n            end_time: new Date(\n              (timeFunctions.getNow() + 21600) * 1000\n            ).toISOString(), // 6 hour validity\n          },\n        });\n        console.log(returnData);\n      }\n    }\n  }\n\n  return returnData;\n};\n\nconst urlLoopRefer = async (observableArray) => {\n  let returnData = [];\n  for (const observable of observableArray) {\n    if (observable.type === 'url') {\n      console.log(`Processing URL: ${observable.value}`);\n      const urlState = await getUrlState(observable.value);\n      const url_status = await urlState.query_status;\n      if (url_status === 'no_results') {\n        console.log(`No results for ${observable.value}`);\n      }\n      if (url_status === 'ok') {\n        await returnData.push({\n          id: `ref-urlhaus-search-url-${observable.value}`,\n          title: 'Search for this URL',\n          description: 'Lookup this URL on URLHaus',\n          url: urlState.urlhaus_reference,\n        });\n        console.log(returnData);\n      }\n    }\n  }\n\n  return returnData;\n};\n\nmodule.exports = (app) => {\n  app.post('/deliberate/observables', async (req, res) => {\n    const observables = req.body;\n    const returnData = await urlLoop(observables);\n    res.send({ data: returnData });\n  });\n\n  app.post('/refer/observables', async (req, res) => {\n    const observables = req.body;\n    const returnData = await urlLoopRefer(observables);\n    res.send({ data: returnData });\n  });\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now lets go into the Investigation from earlier and click on the drowdown next to the URL. A new call should be made out to our relay module and then we should see a link that links out to URLHaus."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"refer",src:t(1516).A+"",width:"2310",height:"1414"})}),"\n",(0,s.jsx)(n.p,{children:"Clicking on that link should bring us to URLHaus:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"refer",src:t(7167).A+"",width:"2622",height:"1454"})}),"\n"]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1516:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/referUrlhaus-7f5c9d5d435ad4dcac3c4d1a4e9ee6e0.png"},7167:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/urlhausReferred-580817d56c0c2b0baed7bd3d0feb8b8a.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);